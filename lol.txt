Program 4
echo'kernel in your system'
uname -a
echo'uantu version ad release number'
lsb_release -a
echo'Top Processes'
ps aux
echo'Process in ascending order '
ps -eo pid,comm,%cpu|sort
echo 'Process in descending order'
ps -eo pid,comm,%cpu|sort -r
echo 'process with highest memory usage'
ps aux --sort -rss|head


Program 5
echo 'Display current logged in user and log name'
w
echo 'Display current shell'
ps -p $$
echo 'Display home directory'
ls
echo 'Display current workig directory'
pwd
echo 'Operatig system type'
uname -r



file handling
f=open("my.txt",'r')
print("Reading my.txt file")
print(f.read())
f.close()

f=open("my.txt",'a')
f.write("I am a java and python programmer.")
f.close()

f=open("my.txt",'r')
print("Reading my.txt file after calling write() function")
print(f.read())
f.close()


unknown
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>

void forksystemcall(){

    int x=1;

    if(fork()==0){
        printf("Child has x = %d\n",++x);
    }
    else{
        printf("\nParent has x = %d",--x);
    }
}

void main(){
    forksystemcall();
}




first fit 
#include<stdio.h>
void main(){

   int bsize[10],psize[10],bno,pno,i,j,flags[10],allocation[10];

   for(i=0;i<10;i++){
       flags[i]=0;
       allocation[i]=1;
   }
    printf("Enter the numer of blocks :\n");
    scanf("%d",&bno);

    printf("Enter the numer of processes :\n");
    scanf("%d",&pno);

    printf("Enter the size of each blocks :\n");
    for(i=0;i<bno;i++){

        printf("Block No.%d : ",i);
        scanf("%d",&bsize[i]);
        
    }

    printf("Enter the size of each process :\n");
    for(i=0;i<pno;i++){

        printf("Process No.%d : ",i);
        scanf("%d",&psize[i]);

    }
    for(i=0;i<pno;i++){
        for(j=0;j<bno;j++){

            if(flags[j]==0 && bsize[j]>=psize[i]){

               
                allocation[j]=i;
                flags[j]=1;
                break;
            }
        }     
    }
    printf("\n\tBlock_no\t\tBlock_size\tProcess_no\t\tProcess_size");
    for(i=0;i<bno ;i++){
        printf("\n\t%d\t\t\t\t%d",i+1,bsize[i]);
        if(flags[i]==1){
              printf("\t\t%d\t\t%d",allocation[i]+1,psize[allocation[i]]);

        }
        else{
            printf("\t\tNot allocated");
        }
    }   
}


best fit 
#include<stdio.h>

void main(){

    int fragment[20],b[20],p[20],nb,np,i,j,temp,lowest=9999;

    int barray[20],parray[20];

    printf("Enter the numer of blocks :\n");
    scanf("%d",&nb);

    printf("Enter the numer of processes :\n");
    scanf("%d",&np);

    printf("Enter the size of each blocks :\n");
    for(i=1;i<=nb;i++){

        printf("Block No.%d : ",i);
        scanf("%d",&b[i]);
        
    }

    printf("Enter the size of each process :\n");
    for(i=1;i<=np;i++){

        printf("Process No.%d : ",i);
        scanf("%d",&p[i]);

    }

    for(i=1;i<=np;i++){
        for(j=1;j<=nb;j++){

            if(barray[j]!=1){

                temp=b[j]-p[i];
                if(temp>=0){
                    if(lowest>temp){
                        parray[i]=j;
                        lowest=temp;
                    }
                }
            }
        }

        fragment[i]=lowest;
        barray[parray[i]]=1;
        lowest=10000;
    }

    printf("\n\tProcess_no\t\tProcess_size\t\tBlock_no\t\tBlock_size\t\tfragment");
    for(i=1;i<=np && parray[i]!=0;i++){
        printf("\n\t%d\t\t\t\t%d\t\t\t%d\t\t\t%d\t\t%d",i,p[i],parray[i],b[parray[i]],fragment[i]);
    } 
}




worst fit
#include<stdio.h>

void main(){

    int fragment[20],b[20],p[20],nb,np,i,j,temp,highest=0;

    int barray[20],parray[20];

    printf("Enter the numer of blocks :\n");
    scanf("%d",&nb);

    printf("Enter the numer of processes :\n");
    scanf("%d",&np);

    printf("Enter the size of each blocks :\n");
    for(i=1;i<=nb;i++){

        printf("Block No.%d : ",i);
        scanf("%d",&b[i]);
        
    }

    printf("Enter the size of each process :\n");
    for(i=1;i<=np;i++){

        printf("Process No.%d : ",i);
        scanf("%d",&p[i]);

    }

    for(i=1;i<=np;i++){
        for(j=1;j<=nb;j++){

            if(barray[j]!=1){

                temp=b[j]-p[i];
                if(temp>=0){
                    if(highest<temp){
                        parray[i]=j;
                        highest=temp;
                    }
                }
            }
        }

        fragment[i]=highest;
        barray[parray[i]]=1;
        highest=0;
    }

    printf("\n\tProcess_no\t\tProcess_size\t\tBlock_no\t\tBlock_size\t\tfragment");
    for(i=1;i<=np ;i++){
        printf("\n\t%d\t\t\t%d\t\t\t%d\t\t\t%d\t\t\t%d",i,p[i],parray[i],b[parray[i]],fragment[i]);
    }
 
}



exp 9
#include <stdio.h>
int main()
{
    int i, j, n, a[50], frame[10], no, k, avail, count = 0;
    printf("\nenter the length of the Reference string:\n");
    scanf("%d", &n);
    printf("\n enter the reference string:\n");
    for (i = 1; i <= n; i++)
        scanf("%d", &a[i]);
    printf("\n enter the number of Frames:");
    scanf("%d", &no);
    for (i = 0; i < no; i++)
        frame[i] = -1;
    j = 0;
    printf("\tref string\t page frames\n");
    for (i = 1; i <= n; i++)
    {
        printf("%d\t\t", a[i]);
        avail = 0;
        for (k = 0; k < no; k++)
            if (frame[k] == a[i])
                avail = 1;
        if (avail == 0)
        {
            frame[j] = a[i];
            j = (j + 1) % no;
            count++;

            for (k = 0; k < no; k++)
                printf("%d\t", frame[k]);
        }
        printf("\n\n");
    }
    printf("Page Fault Is %d", count);
    return 0;
}

